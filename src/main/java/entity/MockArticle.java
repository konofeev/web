package entity;

import java.util.List;
import java.util.ArrayList;

/**
 * Тестовые статьи
 */
public class MockArticle
{
    private List<Article> articles;

    /**
     * Конструктор
     */
    public MockArticle()
    {
        articles = new ArrayList<Article>();
        articles.add
        (
            new Article
            (
                "Тип String",
                "Строка — объект, что представляет последовательность символов. Для создания и манипулирования строками Java платформа предоставляет общедоступный финальный (не может иметь подклассов) класс java.lang.String. Данный класс является неизменяемым (immutable) — созданный объект класса String не может быть изменен. Можно подумать что методы имеют право изменять этот объект, но это неверно. Методы могут только создавать и возвращать новые строки, в которых хранится результат операции"
            )
        );
        articles.add(new Article("Тип StingBuffer", "Строки являются неизменными, поэтому частая их модификация приводит к созданию новых объектов, что в свою очередь расходует драгоценную память. Для решения этой проблемы был создан класс java.lang.StringBuffer, который позволяет более эффективно работать над модификацией строки. Класс является mutable, то есть изменяемым — используйте его, если Вы хотите изменять содержимое строки. StringBuffer может быть использован в многопоточных средах, так как все необходимые методы являются синхронизированными"));
        articles.add
        (
            new Article
            (
                "Тип StingBulder",
                "StringBuilder — класс, что представляет изменяемую последовательность символов. Класс был введен в Java 5 и имеет полностью идентичный API с StringBuffer. Единственное отличие — StringBuilder не синхронизирован. Это означает, что его использование в многопоточных средах есть нежелательным. Следовательно, если вы работаете с многопоточностью, Вам идеально подходит StringBuffer, иначе используйте StringBuilder, который работает намного быстрее в большинстве реализаций"
            )
        );
    }

    /**
     * Получить список статей
     * 
     * @return List<Article> список статей
     */
    public List<Article> getArticles()
    {
        return articles;
    }
}
